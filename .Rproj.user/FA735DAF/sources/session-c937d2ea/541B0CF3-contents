---
title: "Lobster SeaGrant BioORACLE"
output: html_document
date: "2024-05-01"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Download Bio-ORACLE and load packages

```{r}
# only need to run below code once
devtools::install_github("bio-oracle/biooracler")
library(biooracler)
library(tidyverse)
library(ggplot2)
library(ggnewscale)

## for mapping
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library("ggspatial")
library(viridis)
library(ggbrain)

library(ggmap)
library(terra)
library(tidyterra)

library(raster)
library(ncdf4)
```

## Pulling data from Bio-ORACLE

https://github.com/bio-oracle/biooracler

```{r}
## List all available temperature data from Bio-ORACLE
list_layers("OceanTemperature")

## Choose dataset
dataset_id <- "thetao_ssp119_2020_2100_depthmean"
#dataset_id <- "thetao_baseline_2000_2019_depthmean"

time = c('2020-06-01T00:00:00Z', '2020-07-01T00:00:00Z')
latitude = c(37, 50)
longitude = c(-75, -60)

constraints = list(time, latitude, longitude)
names(constraints) = c("time", "latitude", "longitude")

variables = c("thetao_max", "thetao_min", "thetao_mean", "thetao_range")

layers <- download_layers(dataset_id, variables, constraints, fmt = "csv")
# Selected dataset thetao_baseline_2000_2019_depthmean.
# Dataset info available at: http://erddap.bio-oracle.org/erddap/griddap/thetao_baseline_2000_2019_depthmean.html
# Selected 4 variables: thetao_max, thetao_min, thetao_mean, thetao_range
head(layers)

filter(layers, latitude == 37.025 & longitude == -74.975)
```

### PODAAC data 

https://cmr.earthdata.nasa.gov/virtual-directory/collections/C1996881146-POCLOUD/temporal/2023/06/15

```{r}
nc <- nc_open("Maps/20230616090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc")
print(our_nc_data)

temp_data <- ncvar_get(nc, "analysed_sst")
nc_close(nc)

temp_df <- as.data.frame(temp_data)
```

### stat areas
#Pull in stat areas using sf package
StatAreas<-st_read("C:/BoxDrive/Box/Science/Fisheries/Proposals/2024 Lobster Seagrant/Maps/shp/Statistical_Areas_2010_withNames.shp")


#locate the centers of the polygons where the stat area IDs will go and convert to 3857 crs
IDlabels<-st_point_on_surface(StatAreas)


### sampling stations

```{r}
sampling <- read.csv("Maps/LobsterLocations2024.csv") %>%
  dplyr::rename(latitude = lat, longitude = lon)
```


## Create map 

Loading map

```{r}
world <- ne_countries(scale = "medium", returnclass = "sf")
```

## Plotting

```{r}
ggplot(data = world) +
  ## adding temperature data
  geom_tile(data = layers, aes(x = longitude, y = latitude, fill = thetao_mean)) +
  scale_fill_gradient(low = "deepskyblue4", high = "darkslategray1", 
                      na.value = "grey80", name = expression("Temperature ("*degree*C*")")) +
  new_scale("fill") + 
    ## add stat areas
     geom_sf(data=StatAreas, inherit.aes=FALSE,fill=NA) +
    geom_sf_text(data=IDlabels, inherit.aes=FALSE, aes(label=Id), size=2.5) +
  
  ## adding land from geom sf
  geom_sf(fill= "grey70", linewidth=0.3, color="black") +
   coord_sf(xlim = c(-75, -60), ylim = c(37, 50), expand = FALSE) +
  

  ## adding sampling locations
  geom_point(data = sampling, inherit.aes=FALSE, shape=21, size=3.5,
             aes(x=longitude, y=latitude, fill=InOff)) +
  scale_fill_manual(values = c("white", "black", "grey"), guide="none") +
  
  ## adjusting themes 
  theme_bw() +
  xlab("Longitude") + 
  ylab("Latitude") + 
  theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", linewidth = 0.5),
        legend.position=c(0.725,0.085),
        legend.text = element_text(size=10, hjust=1),
        legend.title = element_text(size=10, margin = margin(t = 0, r = 0, b = 5, l = 0)),
        legend.background = element_rect(fill = rgb(255/255, 255/255, 255/255, alpha = 0.5), color="black"),
        legend.title.position = "top",
        legend.box.background = element_blank(),
        legend.direction = "horizontal",
        legend.key = element_rect(fill = "transparent", color = "transparent"),
        #legend.key.width = unit(1.5, "cm"),
        panel.background = element_rect(fill = "white"),
  axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=12),
  axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=12)) +
  annotation_north_arrow(location = "br", which_north = "true", style = north_arrow_fancy_orienteering)

ggsave("Environmental_map_wStatAreas.png", width=7, height=7)
```




