---
title: "Biodiversity Stellwagen 12S eDNA"
output:
  github_document: default
  pdf_document:
    keep_tex: yes
  html_document:
    toc: yes
    toc_depth: 6
    toc_float: yes
editor_options: 
  chunk_output_type: inline
---

## Load libraries

```{r}
library(ggplot2) ## for plotting
library(plyr) ## needs to be loaded before dplyr
library(dplyr) ## for data table manipulation
library(tidyr) ## for data table manipulation
library(tidyverse) ## for data table manipulation
library(readxl) ## for reading in excel files 
library(stringr) ## for data transformation
library(strex) ## for data transformation
library(writexl) ## for excel output
library(purrr) ## for data transformation
library(naniar) ## replace_with_na_all function
library(cowplot) ## for plot_grid function
library(htmltools)
library(data.table)
library(htmlwidgets)
library(BiodiversityR) ## for biodiversity metrics
library(vegan) ## for biodiversity metrics
library(picante) ## for biodiversity metrics
library(knitr) ## for biodiversity metrics
library(funrar) ## for make relative function
library(ggsignif)
library(lme4) ## for stats
library(car) ## for stats
library(stats) ## for stats
library("phyloseq")
library(UpSetR) ## for upset plot
library(VennDiagram)
library(ggplotify) ## for exporting options with ggsave

#options(scipen = 999) ## disabling scientific notation (for figures)
```

## Read in dataframes 

```{r}
data <- read_xlsx("../Results_matrix.xlsx") %>% dplyr::select(-Common_name, -Category)
meta <- read.csv("../SBNMS_metadata.csv") %>%
  #%>% dplyr::select(-sampleID) %>% distinct()
  mutate(sampleID = gsub("-", "_", sampleID))
category_list <- read_xlsx("../Category_list.xlsx") %>% dplyr::select(Species_name:Category)

meta_merged <- meta %>% dplyr::select(-sampleID) %>% 
  unite(sampleID, Site, SampleType, sep = "_", remove=FALSE) %>% distinct()

paper_stats <- data %>% 
   ## filtering out "other" group
  right_join(category_list, ., by = c("Species_name")) %>%
  subset(!Category=="Other")
```

Data transformation

```{r}
## Data transformation specific to this project
## goal is to be in final matrix form
data <- data %>% 
   ## filtering out "other" group
  left_join(., category_list, by = c("Species_name")) %>%
  subset(!Category=="Other") %>% dplyr::select(-Category,-Common_name) %>%
  
    ## changing species_name to rowname 
  column_to_rownames(var="Species_name") %>%
    ## removing columns with sum of zero 
  dplyr::select(which(!colSums(., na.rm=TRUE) %in% 0)) %>%
    ## rownames back to column 
  rownames_to_column("Species_name") %>%
  
    ## summarizing sediment samples together
    ## data transformation to long format
  gather(., sampleID, Abundance, -Species_name) %>%
    ## bringing in metadata 
  left_join(., meta, by = "sampleID") %>%
    ## group by site, section, sampletype
  dplyr::group_by(Site, Section, SampleType, Species_name) %>% dplyr::select(-sampleID) %>%
    ## collapse three sediment samples
  mutate(Abundance = sum(Abundance)) %>% distinct() %>% ungroup() %>%
   
    ## returning back to wide format (matrix)
  spread(Species_name, Abundance) %>% 
  
    ## creating new sample ID column 
  unite(sampleID, Site, SampleType, sep = "_", remove=TRUE) %>% dplyr::select(-Section, -Substrate) %>%
  
    ## sampleID to rownames
  column_to_rownames(var = "sampleID")

data %>% rownames_to_column(var = "sampleID") %>% write_xlsx("../Results_matrix.xlsx")

## print the most common species 
data %>% 
  summarise_all(sum) %>%
  gather("species", "count") %>%
  arrange(desc(count)) %>%
  mutate(percent = (count / sum(count)) * 100)
```

### Calculate relative abundance 

```{r}
## creating matrix
data.matrix <- as.matrix(data)

## calculating relative abundance
data_relativeab_matrix <- make_relative(data.matrix)

data_relativeab <- as.data.frame(data_relativeab_matrix) %>%
    ## bringing rownames back to a column 
  rownames_to_column(., var = "sampleID") %>%
    ## transforming df to longer format
  gather(Species_name, Abundance, -sampleID) %>%
    ## changing order of columns 
  relocate(c(1,3,2))
```

### Data preparation with vegan

```{r}
diversity_matrix <- sample2matrix(data_relativeab)

diversity_matrix %>% rownames_to_column(var = "sampleID") %>%
  write_xlsx("../Results_relativeab_matrix.xlsx")
```

## Alpha Diversity metrics 

Calculating

```{r}
## number of species at each site (each column)
# specnumber(diversity_matrix)

## Simpson's diversity
simpson_df <- as.data.frame(diversity(diversity_matrix, index = "simpson")) %>%
  rownames_to_column("sampleID") %>% 
  dplyr::rename(simpson = 'diversity(diversity_matrix, index = \"simpson\")')

## Shannon's diversity
shannon_df <- as.data.frame(diversity(diversity_matrix, index = "shannon")) %>%
  rownames_to_column("sampleID") %>% 
  dplyr::rename(shannon = 'diversity(diversity_matrix, index = \"shannon\")')

alpha_diversity <- left_join(simpson_df, shannon_df, by = "sampleID") %>%
  left_join(., meta_merged, by = "sampleID")

## Species richness
sp_richness <- data_relativeab %>% left_join(., meta_merged, by = "sampleID") %>%
  filter(Abundance > 0) %>%
  dplyr::group_by(sampleID) %>%
  mutate(richness = n_distinct(Species_name)) %>% dplyr::select(-Abundance, -Species_name) %>% distinct()

alpha_diversity <- alpha_diversity %>% left_join(., sp_richness, by = c("sampleID", "Section", "Site", "Substrate", "SampleType"))


### statistics
alpha_diversity_subset <- alpha_diversity %>% 
  #subset(SampleType == "Sediment")
  subset(Section == "Central SB")
aov <- aov(richness ~ SampleType*Section, data = alpha_diversity)
Anova(aov, type = "III")
TukeyHSD(aov)
```

##### Species richness results 

SampleType         148.61  2  41.7107 5.337e-13 ***
Section             57.74  2  16.2050 1.337e-06 ***
SampleType:Section  59.73  4   8.3825 1.146e-05 ***

Bottom water 
- South SB-Central SB **0.0015861**
- South SB-North SB **0.0321587**

Surface water 
- No site interactions 

Sediment 
- No site interactions 

Central SB
- Sediment-Bottom Water      **0.0001083**
- Surface Water-Bottom Water **0.0000094**

South SB 
- Sediment-Bottom Water **0.0010825**
- Surface Water-Bottom Water **0.0498182**

North SB 
- Sediment-Bottom Water      **< 0.0001**
- Surface Water-Bottom Water **< 0.0001**


Statistics

```{r}
stats_df <- alpha_diversity %>%
            relocate(richness, .after = shannon) %>%
            gather("measurement", "value", c(simpson:richness))

cols <- unique(stats_df$measurement)

for (i in cols){
  summary <- stats_df %>% subset(measurement == i) 
  
  aov <- aov(value ~ Section*SampleType, data = summary)
  ANOVA <- Anova(aov, type = "III")
  TUKEY <- TukeyHSD(aov)
  
  ANOVA_results <- as.data.frame(ANOVA)
  ANOVA_results <- rownames_to_column(ANOVA_results, var = "variable") %>% mutate_if(is.numeric, round, 6)
  
  TUKEY_results1 <- as.data.frame(TUKEY$`Section:SampleType`) %>% rownames_to_column(., var = "variable")
  TUKEY_results2 <- as.data.frame(TUKEY$Section) %>% rownames_to_column(., var = "variable")
  TUKEY_results3 <- as.data.frame(TUKEY$SampleType) %>% rownames_to_column(., var = "variable")
  TUKEY_results <- rbind(TUKEY_results1, TUKEY_results2, TUKEY_results3) %>% 
    filter(`p adj` < 0.050) %>%
    mutate_if(is.numeric, round, 6)
  
  write_xlsx(ANOVA_results, paste0("statistics/", i, "_ANOVA.xlsx"))
  write_xlsx(TUKEY_results, paste0("statistics/", i, "_sig_TUKEY.xlsx"))
}


```

Plotting 

```{r}
alpha_plot <- stats_df %>%
  ggplot(., aes(x=Section, y=value)) +
  geom_boxplot(aes(fill=Section), alpha=0.1, outlier.shape = NA) + 
  geom_jitter(aes(fill=Section, shape=Section), size=3, color="black",
             alpha=0.75, width=0.2, stroke = 0.87) + 
  facet_wrap(SampleType~measurement, strip.position = c("top"), #scales = "free", 
             labeller = as_labeller(c(shannon = "Shannon Index",
                                      simpson = "Simpson Index",
                                      richness = "Species Richness",
                                      `Bottom Water` = "Bottom Water",
                                      `Surface Water` = "Surface Water",
                                      Sediment = "Sediment"))) +
  # geom_signif(
  #   data = annotation_df,
  #   aes(xmin = start, xmax = end, annotations = label), #y_position = y
  #   textsize = 3, vjust = -0.2) +
  ylab("") +
  theme_bw() + 
  guides(fill = "none") +
  #scale_fill_manual(values = c("deepskyblue4", "lightsalmon3", "lightsteelblue1")) +
  scale_fill_manual(values = c("green4", "dodgerblue2", "darkorchid4")) +
  scale_shape_manual(values = c(21,22,23)) +
  theme(strip.background = element_blank(), strip.placement = "outside",
        axis.text.x = element_text(size=8, color="grey40"),
        #strip.text.x.top = element_text(size=10, color = "black", face = "bold"),
        strip.text.y.left = element_text(size=10, color = "black", face = "bold"),
        legend.text = element_text(size = 6, color="black"), 
        legend.position = c("none"),
        panel.spacing = unit(1, "mm"),
        legend.key.height = unit(4, 'mm'),
        legend.key.width = unit(4, 'mm'),
        legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), 
                                    size=7, color="black", face="bold"),
        axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
        axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
        axis.text.y = element_text(colour = 'black', size = 6))

ggsave("Alpha_diversity_site.png", alpha_plot, width=10, height=10)
```

## Beta diversity 

```{r}
set.seed(123456)

vare.mds <- metaMDS(diversity_matrix, distance = "bray")
data.scores <- as.data.frame(scores(vare.mds)$sites) %>%
  rownames_to_column(var = "sampleID") %>%
  left_join(., meta_merged, by = "sampleID")

## preping df for permanova test 
permanova_meta <- diversity_matrix %>%
  rownames_to_column(var = "sampleID") %>%
  left_join(., meta_merged, by = "sampleID") %>%
  subset(SampleType == "Sediment")

diversity_matrix_subset <- permanova_meta[2:35]
  
## permanova test
## data = 
## formul
adonis2(data=permanova_meta, formula = diversity_matrix_subset ~ Section, method = "bray", permutations = 999)
```

                        Df SumOfSqs      R2       F Pr(>F)    
Section             2   0.9454 0.03222  1.8754  0.040 *  
SampleType          2   7.5998 0.25900 15.0747  0.001 ***
Section:SampleType  4   1.3878 0.04730  1.3764  0.116    
Residual           77  19.4093 0.66148                   
Total              85  29.3423 1.00000

Plotting

```{r}
NMDS_plot <- data.scores %>%
  ggplot(., aes(x=NMDS1, y=NMDS2, fill=SampleType, color=SampleType)) + 
  geom_point(aes(shape=Section, fill=SampleType), alpha=0.7, color="black", size=4, stroke=0.85) + 
  stat_ellipse(level = 0.95, size=1.5, alpha=0.4) + 
  theme_bw() + 
  labs(color="Sample Type") +
  guides(fill = "none") +
  scale_fill_manual(values = c("deepskyblue4", "lightsalmon3", "lightsteelblue1")) +
  scale_color_manual(values = c("deepskyblue4", "lightsalmon3", "lightsteelblue1")) +
  scale_shape_manual(values = c(21,22,23)) +
  theme(
    axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=12, face="bold"),
    axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=12, face="bold"),
    axis.text.y = element_text(colour = 'black', size = 10),
    axis.text.x = element_text(colour = 'black', size = 10),
    legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold")
  )

ggsave("NMDS_sampletype.png", NMDS_plot, width=7, height=6)

NMDS_plot2 <- data.scores %>%
  ggplot(., aes(x=NMDS1, y=NMDS2, fill=Section, color=Section)) + 
  geom_point(aes(shape=SampleType, fill=Section), alpha=0.7, color="black", size=4, stroke=0.85) + 
  stat_ellipse(level = 0.95, size=1.5, alpha=0.4) + 
  theme_bw() + 
  labs(color="Section") +
  guides(fill = "none") +
  scale_fill_manual(values = c("green4", "dodgerblue2", "darkorchid4")) +
  scale_color_manual(values = c("green4", "dodgerblue2", "darkorchid4")) +
  scale_shape_manual(values = c(21,22,23)) +
  theme(
    axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=12, face="bold"),
    axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=12, face="bold"),
    axis.text.y = element_text(colour = 'black', size = 10),
    axis.text.x = element_text(colour = 'black', size = 10),
    legend.title = element_text(margin = margin(t = 0, r = 0, b = 5, l = 0), size=10, color="black", face="bold")
  )

ggsave("NMDS_section.png", NMDS_plot2, width=7, height=6)
```


## Species overlap 

For venn diagram or upset plot.

```{r}
## print number of spp in each sample type 
data_relativeab %>% left_join(., meta_merged, by = "sampleID") %>%
  group_by(SampleType) %>% filter(Abundance > 0) %>%
  mutate(spp_count = n_distinct(Species_name)) %>%
  dplyr::select(SampleType, spp_count) %>% distinct()

bottom_spp <- data_relativeab %>% left_join(., meta_merged, by = "sampleID") %>% filter(Abundance > 0) %>%
  subset(SampleType == "Bottom Water") %>% dplyr::select(Species_name) %>% distinct()
surface_spp <- data_relativeab %>% left_join(., meta_merged, by = "sampleID") %>% filter(Abundance > 0) %>%
  subset(SampleType == "Surface Water") %>% dplyr::select(Species_name) %>% distinct()
sediment_spp <- data_relativeab %>% left_join(., meta_merged, by = "sampleID") %>% filter(Abundance > 0) %>%
  subset(SampleType == "Sediment") %>% dplyr::select(Species_name) %>% distinct()

inner_join(surface_spp, bottom_spp) %>% inner_join(., sediment_spp)
anti_join(surface_spp, bottom_spp) %>% anti_join(sediment_spp)

input <- c(
  Sediment = 4,
  Surface = 3,
  Bottom = 12,
  "Sediment&Surface" = 0,
  "Sediment&Bottom" = 5,
  "Bottom&Surface" = 2,
  "Surface&Bottom&Sediment" = 8
  )

## Upset plot
pdf("upset.pdf", width = 8, height=4)
upset(fromExpression(input), 
      # nintersects = 40, 
      # nsets = 6, 
      order.by = "freq", 
      decreasing = T, 
      mb.ratio = c(0.6, 0.4),
      number.angles = 0, 
      text.scale = 1.3, 
      point.size = 5, 
      line.size = 1.25,
      matrix.dot.alpha = 0.5,
      mainbar.y.label = "Species Count", 
	    sets.x.label = "Total Species Count",
      empty.intersections = TRUE,
      #color.pal = c("deepskyblue4", "grey40", "grey40", "lightsalmon3", "lightsteelblue1", "grey40"),
      #matrix.color = c("deepskyblue4", "grey40", "grey40", "lightsalmon3", "lightsteelblue1", "grey40"),
      main.bar.color = c("deepskyblue4", "grey40", "grey40", "lightsalmon3", "lightsteelblue1", "grey40", "grey40"),
      #comb.col = c("deepskyblue4", "grey40", "grey40", "lightsalmon3", "lightsteelblue1", "grey40"),
      sets.bar.color=c("deepskyblue4", "lightsalmon3", "lightsteelblue1")
      )
dev.off()

```

```{r}
## Venn Diagram 
#Make the plot
venn.diagram(
  x = list(
    bottom_spp %>% unlist(), 
    surface_spp %>% unlist(), 
    sediment_spp %>% unlist()
    ),
  category.names = c("Bottom Water" , "Surface Water" , "Sediment"),
  filename = '12S_venn.png',
  output = TRUE ,
          imagetype="png" ,
          height = 480 , 
          width = 480 , 
          resolution = 300,
          compression = "lzw",
          lwd = 1,
          col=c("deepskyblue4", "lightsteelblue1", "lightsalmon3"),
          fill = c(alpha("deepskyblue4",0.3), alpha('lightsteelblue1',0.3), alpha('lightsalmon3',0.3)),
          cex = 0.5,
          fontfamily = "sans",
          cat.cex = 0.3,
          cat.default.pos = "outer",
          cat.pos = c(-27, 27, 135),
          cat.dist = c(0.055, 0.055, 0.085),
          cat.fontfamily = "sans",
          cat.col = c("deepskyblue4", "lightsteelblue1", "lightsalmon3"),
          rotation = 1
        )

```













